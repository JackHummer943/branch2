// Отсортировать массив по возрастанию на интервале индексов от N1 до N2.

// Алгоритм сортировки выбором:
// с первого элемента проходимся по массиву
// находим мин. элмент в оставшейся части массива
// обмениваем текущий элемент с минимальным элементом
// начиная со второго элемента по новой находим мин. элемент в оставшейся части массива и обмениваем текущий элемент с минимальным

#include <iostream>
using namespace std;

// реализуем алгоритм сортировки выбором
// принимаем массив
void selectSort(int arr[], int n)
{
  // цикл от нуля до элемента меньше минимального индекса на единицу, перебор элементов по порядку
  for (int x = 0; x < n - 1; x++)
  {
    // присваиваем новой переменной значение x
    int minIndex = x;
    // начинаем с x + 1
    for (int y = x + 1; y < n; y++)
    {
      if (arr[y] < arr[minIndex])
      {
        minIndex = y;
      }
    }
    int temp = arr[minIndex];
    arr[minIndex] = arr[x];
    arr[x] = temp;
  }
}

int main()
{
  // задаем размер массива
  int size = 10;
  int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
  // Переменные n1 и n2 задают интервал индексов, на котором нужно выполнить сортировку.
  int n1 = 2;
  int n2 = 7;

  // Сортировка только на интервале от n1 до n2, для этого два вложеных цикла
  for (int x = n1; x <= n2; x++)
  { // также сортировка выбором
    int minIndex = x;

    for (int y = x + 1; y <= n2; y++)
    {
      if (arr[y] < arr[minIndex])
      {
        minIndex = y;
      }
    }
    int temp = arr[minIndex];
    arr[minIndex] = arr[x];
    arr[x] = temp;
  }
  // Сортировка всего массива
  // selectSort(arr, size)

  // выводим массив
  for (int x = 0; x < size; x++)
  {
    cout << arr[x] << " ";
  }
  return 0;
}
